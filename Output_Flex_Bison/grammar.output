
Grammar
rule 1    end_point_of_collapse -> list_of_functions
rule 2    list_of_functions -> list_of_functions function
rule 3    list_of_functions -> function
rule 4    function -> function_declaration compound_statement_with_brackets
rule 5    function_declaration -> FUNCTION data_type arguement_list_with_brackets VALUE
rule 6    data_type -> INT
rule 7    data_type -> VOID
rule 8    arguement_list_with_brackets -> arguement_list_with_brackets ')'
rule 9    arguement_list_with_brackets -> arguement_list_with_brackets ',' variable_declaration
rule 10   arguement_list_with_brackets -> '(' variable_declaration
rule 11   arguement_list_with_brackets -> '(' ')'
rule 12   variable_declaration -> data_type VALUE
rule 13   compound_statement_with_brackets -> compound_statement_with_brackets '}'
rule 14   compound_statement_with_brackets -> compound_statement_with_brackets statement_with_semicolon
rule 15   compound_statement_with_brackets -> '{' statement_with_semicolon
rule 16   statement_with_semicolon -> assignment_statement ';'
rule 17   statement_with_semicolon -> additive_statement ';'
rule 18   statement_with_semicolon -> RETURN ';'
rule 19   multiplicative_statement -> multiplicative_statement '*' VALUE
rule 20   multiplicative_statement -> multiplicative_statement '/' VALUE
rule 21   multiplicative_statement -> VALUE
rule 22   additive_statement -> additive_statement '+' multiplicative_statement
rule 23   additive_statement -> additive_statement '-' multiplicative_statement
rule 24   additive_statement -> multiplicative_statement
rule 25   assignment_statement -> variable_declaration '=' additive_statement
rule 26   assignment_statement -> VALUE '=' additive_statement

Terminals, with rules where they appear

$ (-1)
'(' (40) 10 11
')' (41) 8 11
'*' (42) 19
'+' (43) 22
',' (44) 9
'-' (45) 23
'/' (47) 20
';' (59) 16 17 18
'=' (61) 25 26
'{' (123) 15
'}' (125) 13
error (256)
INT (258) 6
FUNCTION (259) 5
VOID (260) 7
VALUE (261) 5 12 19 20 21 26
RETURN (262) 18

Nonterminals, with rules where they appear

end_point_of_collapse (19)
    on left: 1
list_of_functions (20)
    on left: 2 3, on right: 1 2
function (21)
    on left: 4, on right: 2 3
function_declaration (22)
    on left: 5, on right: 4
data_type (23)
    on left: 6 7, on right: 5 12
arguement_list_with_brackets (24)
    on left: 8 9 10 11, on right: 5 8 9
variable_declaration (25)
    on left: 12, on right: 9 10 25
compound_statement_with_brackets (26)
    on left: 13 14 15, on right: 4 13 14
statement_with_semicolon (27)
    on left: 16 17 18, on right: 14 15
multiplicative_statement (28)
    on left: 19 20 21, on right: 19 20 22 23 24
additive_statement (29)
    on left: 22 23 24, on right: 17 22 23 25 26
assignment_statement (30)
    on left: 25 26, on right: 16


state 0

    FUNCTION	shift, and go to state 1

    end_point_of_collapse	go to state 46
    list_of_functions	go to state 2
    function	go to state 3
    function_declaration	go to state 4



state 1

    function_declaration  ->  FUNCTION . data_type arguement_list_with_brackets VALUE   (rule 5)

    INT 	shift, and go to state 5
    VOID	shift, and go to state 6

    data_type	go to state 7



state 2

    end_point_of_collapse  ->  list_of_functions .   (rule 1)
    list_of_functions  ->  list_of_functions . function   (rule 2)

    FUNCTION	shift, and go to state 1

    $default	reduce using rule 1 (end_point_of_collapse)

    function	go to state 8
    function_declaration	go to state 4



state 3

    list_of_functions  ->  function .   (rule 3)

    $default	reduce using rule 3 (list_of_functions)



state 4

    function  ->  function_declaration . compound_statement_with_brackets   (rule 4)

    '{' 	shift, and go to state 9

    compound_statement_with_brackets	go to state 10



state 5

    data_type  ->  INT .   (rule 6)

    $default	reduce using rule 6 (data_type)



state 6

    data_type  ->  VOID .   (rule 7)

    $default	reduce using rule 7 (data_type)



state 7

    function_declaration  ->  FUNCTION data_type . arguement_list_with_brackets VALUE   (rule 5)

    '(' 	shift, and go to state 11

    arguement_list_with_brackets	go to state 12



state 8

    list_of_functions  ->  list_of_functions function .   (rule 2)

    $default	reduce using rule 2 (list_of_functions)



state 9

    compound_statement_with_brackets  ->  '{' . statement_with_semicolon   (rule 15)

    INT 	shift, and go to state 5
    VOID	shift, and go to state 6
    VALUE	shift, and go to state 13
    RETURN	shift, and go to state 14

    data_type	go to state 15
    variable_declaration	go to state 16
    statement_with_semicolon	go to state 17
    multiplicative_statement	go to state 18
    additive_statement	go to state 19
    assignment_statement	go to state 20



state 10

    function  ->  function_declaration compound_statement_with_brackets .   (rule 4)
    compound_statement_with_brackets  ->  compound_statement_with_brackets . '}'   (rule 13)
    compound_statement_with_brackets  ->  compound_statement_with_brackets . statement_with_semicolon   (rule 14)

    INT 	shift, and go to state 5
    VOID	shift, and go to state 6
    VALUE	shift, and go to state 13
    RETURN	shift, and go to state 14
    '}' 	shift, and go to state 21

    $default	reduce using rule 4 (function)

    data_type	go to state 15
    variable_declaration	go to state 16
    statement_with_semicolon	go to state 22
    multiplicative_statement	go to state 18
    additive_statement	go to state 19
    assignment_statement	go to state 20



state 11

    arguement_list_with_brackets  ->  '(' . variable_declaration   (rule 10)
    arguement_list_with_brackets  ->  '(' . ')'   (rule 11)

    INT 	shift, and go to state 5
    VOID	shift, and go to state 6
    ')' 	shift, and go to state 23

    data_type	go to state 15
    variable_declaration	go to state 24



state 12

    function_declaration  ->  FUNCTION data_type arguement_list_with_brackets . VALUE   (rule 5)
    arguement_list_with_brackets  ->  arguement_list_with_brackets . ')'   (rule 8)
    arguement_list_with_brackets  ->  arguement_list_with_brackets . ',' variable_declaration   (rule 9)

    VALUE	shift, and go to state 25
    ')' 	shift, and go to state 26
    ',' 	shift, and go to state 27



state 13

    multiplicative_statement  ->  VALUE .   (rule 21)
    assignment_statement  ->  VALUE . '=' additive_statement   (rule 26)

    '=' 	shift, and go to state 28

    $default	reduce using rule 21 (multiplicative_statement)



state 14

    statement_with_semicolon  ->  RETURN . ';'   (rule 18)

    ';' 	shift, and go to state 29



state 15

    variable_declaration  ->  data_type . VALUE   (rule 12)

    VALUE	shift, and go to state 30



state 16

    assignment_statement  ->  variable_declaration . '=' additive_statement   (rule 25)

    '=' 	shift, and go to state 31



state 17

    compound_statement_with_brackets  ->  '{' statement_with_semicolon .   (rule 15)

    $default	reduce using rule 15 (compound_statement_with_brackets)



state 18

    multiplicative_statement  ->  multiplicative_statement . '*' VALUE   (rule 19)
    multiplicative_statement  ->  multiplicative_statement . '/' VALUE   (rule 20)
    additive_statement  ->  multiplicative_statement .   (rule 24)

    '*' 	shift, and go to state 32
    '/' 	shift, and go to state 33

    $default	reduce using rule 24 (additive_statement)



state 19

    statement_with_semicolon  ->  additive_statement . ';'   (rule 17)
    additive_statement  ->  additive_statement . '+' multiplicative_statement   (rule 22)
    additive_statement  ->  additive_statement . '-' multiplicative_statement   (rule 23)

    '+' 	shift, and go to state 34
    '-' 	shift, and go to state 35
    ';' 	shift, and go to state 36



state 20

    statement_with_semicolon  ->  assignment_statement . ';'   (rule 16)

    ';' 	shift, and go to state 37



state 21

    compound_statement_with_brackets  ->  compound_statement_with_brackets '}' .   (rule 13)

    $default	reduce using rule 13 (compound_statement_with_brackets)



state 22

    compound_statement_with_brackets  ->  compound_statement_with_brackets statement_with_semicolon .   (rule 14)

    $default	reduce using rule 14 (compound_statement_with_brackets)



state 23

    arguement_list_with_brackets  ->  '(' ')' .   (rule 11)

    $default	reduce using rule 11 (arguement_list_with_brackets)



state 24

    arguement_list_with_brackets  ->  '(' variable_declaration .   (rule 10)

    $default	reduce using rule 10 (arguement_list_with_brackets)



state 25

    function_declaration  ->  FUNCTION data_type arguement_list_with_brackets VALUE .   (rule 5)

    $default	reduce using rule 5 (function_declaration)



state 26

    arguement_list_with_brackets  ->  arguement_list_with_brackets ')' .   (rule 8)

    $default	reduce using rule 8 (arguement_list_with_brackets)



state 27

    arguement_list_with_brackets  ->  arguement_list_with_brackets ',' . variable_declaration   (rule 9)

    INT 	shift, and go to state 5
    VOID	shift, and go to state 6

    data_type	go to state 15
    variable_declaration	go to state 38



state 28

    assignment_statement  ->  VALUE '=' . additive_statement   (rule 26)

    VALUE	shift, and go to state 39

    multiplicative_statement	go to state 18
    additive_statement	go to state 40



state 29

    statement_with_semicolon  ->  RETURN ';' .   (rule 18)

    $default	reduce using rule 18 (statement_with_semicolon)



state 30

    variable_declaration  ->  data_type VALUE .   (rule 12)

    $default	reduce using rule 12 (variable_declaration)



state 31

    assignment_statement  ->  variable_declaration '=' . additive_statement   (rule 25)

    VALUE	shift, and go to state 39

    multiplicative_statement	go to state 18
    additive_statement	go to state 41



state 32

    multiplicative_statement  ->  multiplicative_statement '*' . VALUE   (rule 19)

    VALUE	shift, and go to state 42



state 33

    multiplicative_statement  ->  multiplicative_statement '/' . VALUE   (rule 20)

    VALUE	shift, and go to state 43



state 34

    additive_statement  ->  additive_statement '+' . multiplicative_statement   (rule 22)

    VALUE	shift, and go to state 39

    multiplicative_statement	go to state 44



state 35

    additive_statement  ->  additive_statement '-' . multiplicative_statement   (rule 23)

    VALUE	shift, and go to state 39

    multiplicative_statement	go to state 45



state 36

    statement_with_semicolon  ->  additive_statement ';' .   (rule 17)

    $default	reduce using rule 17 (statement_with_semicolon)



state 37

    statement_with_semicolon  ->  assignment_statement ';' .   (rule 16)

    $default	reduce using rule 16 (statement_with_semicolon)



state 38

    arguement_list_with_brackets  ->  arguement_list_with_brackets ',' variable_declaration .   (rule 9)

    $default	reduce using rule 9 (arguement_list_with_brackets)



state 39

    multiplicative_statement  ->  VALUE .   (rule 21)

    $default	reduce using rule 21 (multiplicative_statement)



state 40

    additive_statement  ->  additive_statement . '+' multiplicative_statement   (rule 22)
    additive_statement  ->  additive_statement . '-' multiplicative_statement   (rule 23)
    assignment_statement  ->  VALUE '=' additive_statement .   (rule 26)

    '+' 	shift, and go to state 34
    '-' 	shift, and go to state 35

    $default	reduce using rule 26 (assignment_statement)



state 41

    additive_statement  ->  additive_statement . '+' multiplicative_statement   (rule 22)
    additive_statement  ->  additive_statement . '-' multiplicative_statement   (rule 23)
    assignment_statement  ->  variable_declaration '=' additive_statement .   (rule 25)

    '+' 	shift, and go to state 34
    '-' 	shift, and go to state 35

    $default	reduce using rule 25 (assignment_statement)



state 42

    multiplicative_statement  ->  multiplicative_statement '*' VALUE .   (rule 19)

    $default	reduce using rule 19 (multiplicative_statement)



state 43

    multiplicative_statement  ->  multiplicative_statement '/' VALUE .   (rule 20)

    $default	reduce using rule 20 (multiplicative_statement)



state 44

    multiplicative_statement  ->  multiplicative_statement . '*' VALUE   (rule 19)
    multiplicative_statement  ->  multiplicative_statement . '/' VALUE   (rule 20)
    additive_statement  ->  additive_statement '+' multiplicative_statement .   (rule 22)

    '*' 	shift, and go to state 32
    '/' 	shift, and go to state 33

    $default	reduce using rule 22 (additive_statement)



state 45

    multiplicative_statement  ->  multiplicative_statement . '*' VALUE   (rule 19)
    multiplicative_statement  ->  multiplicative_statement . '/' VALUE   (rule 20)
    additive_statement  ->  additive_statement '-' multiplicative_statement .   (rule 23)

    '*' 	shift, and go to state 32
    '/' 	shift, and go to state 33

    $default	reduce using rule 23 (additive_statement)



state 46

    $   	go to state 47



state 47

    $   	go to state 48



state 48

    $default	accept
