
Grammar
rule 1    end_point_of_collapse -> list_of_functions
rule 2    list_of_functions -> list_of_functions function
rule 3    list_of_functions -> function
rule 4    function -> function_declaration compound_statement_with_brackets
rule 5    function_declaration -> FUNCTION data_type arguement_list_with_brackets VALUE
rule 6    data_type -> INT
rule 7    data_type -> FLOAT
rule 8    data_type -> VOID
rule 9    arguement_list_with_brackets -> arguement_list_with_brackets ')'
rule 10   arguement_list_with_brackets -> arguement_list_with_brackets ',' variable_declaration
rule 11   arguement_list_with_brackets -> '(' variable_declaration
rule 12   arguement_list_with_brackets -> '(' ')'
rule 13   variable_declaration -> data_type VALUE
rule 14   compound_statement_with_brackets -> compound_statement_with_brackets '}'
rule 15   compound_statement_with_brackets -> compound_statement_with_brackets statement_with_semicolon
rule 16   compound_statement_with_brackets -> '{' statement_with_semicolon
rule 17   statement_with_semicolon -> assignment_statement ';'
rule 18   statement_with_semicolon -> additive_statement ';'
rule 19   statement_with_semicolon -> RETURN ';'
rule 20   multiplicative_statement -> multiplicative_statement '*' VALUE
rule 21   multiplicative_statement -> multiplicative_statement '/' VALUE
rule 22   multiplicative_statement -> VALUE
rule 23   additive_statement -> additive_statement '+' multiplicative_statement
rule 24   additive_statement -> additive_statement '-' multiplicative_statement
rule 25   additive_statement -> multiplicative_statement
rule 26   assignment_statement -> variable_declaration '=' additive_statement
rule 27   assignment_statement -> VALUE '=' additive_statement

Terminals, with rules where they appear

$ (-1)
'(' (40) 11 12
')' (41) 9 12
'*' (42) 20
'+' (43) 23
',' (44) 10
'-' (45) 24
'/' (47) 21
';' (59) 17 18 19
'=' (61) 26 27
'{' (123) 16
'}' (125) 14
error (256)
INT (258) 6
FLOAT (259) 7
FUNCTION (260) 5
VOID (261) 8
VALUE (262) 5 13 20 21 22 27
RETURN (263) 19

Nonterminals, with rules where they appear

end_point_of_collapse (20)
    on left: 1
list_of_functions (21)
    on left: 2 3, on right: 1 2
function (22)
    on left: 4, on right: 2 3
function_declaration (23)
    on left: 5, on right: 4
data_type (24)
    on left: 6 7 8, on right: 5 13
arguement_list_with_brackets (25)
    on left: 9 10 11 12, on right: 5 9 10
variable_declaration (26)
    on left: 13, on right: 10 11 26
compound_statement_with_brackets (27)
    on left: 14 15 16, on right: 4 14 15
statement_with_semicolon (28)
    on left: 17 18 19, on right: 15 16
multiplicative_statement (29)
    on left: 20 21 22, on right: 20 21 23 24 25
additive_statement (30)
    on left: 23 24 25, on right: 18 23 24 26 27
assignment_statement (31)
    on left: 26 27, on right: 17


state 0

    FUNCTION	shift, and go to state 1

    end_point_of_collapse	go to state 47
    list_of_functions	go to state 2
    function	go to state 3
    function_declaration	go to state 4



state 1

    function_declaration  ->  FUNCTION . data_type arguement_list_with_brackets VALUE   (rule 5)

    INT 	shift, and go to state 5
    FLOAT	shift, and go to state 6
    VOID	shift, and go to state 7

    data_type	go to state 8



state 2

    end_point_of_collapse  ->  list_of_functions .   (rule 1)
    list_of_functions  ->  list_of_functions . function   (rule 2)

    FUNCTION	shift, and go to state 1

    $default	reduce using rule 1 (end_point_of_collapse)

    function	go to state 9
    function_declaration	go to state 4



state 3

    list_of_functions  ->  function .   (rule 3)

    $default	reduce using rule 3 (list_of_functions)



state 4

    function  ->  function_declaration . compound_statement_with_brackets   (rule 4)

    '{' 	shift, and go to state 10

    compound_statement_with_brackets	go to state 11



state 5

    data_type  ->  INT .   (rule 6)

    $default	reduce using rule 6 (data_type)



state 6

    data_type  ->  FLOAT .   (rule 7)

    $default	reduce using rule 7 (data_type)



state 7

    data_type  ->  VOID .   (rule 8)

    $default	reduce using rule 8 (data_type)



state 8

    function_declaration  ->  FUNCTION data_type . arguement_list_with_brackets VALUE   (rule 5)

    '(' 	shift, and go to state 12

    arguement_list_with_brackets	go to state 13



state 9

    list_of_functions  ->  list_of_functions function .   (rule 2)

    $default	reduce using rule 2 (list_of_functions)



state 10

    compound_statement_with_brackets  ->  '{' . statement_with_semicolon   (rule 16)

    INT 	shift, and go to state 5
    FLOAT	shift, and go to state 6
    VOID	shift, and go to state 7
    VALUE	shift, and go to state 14
    RETURN	shift, and go to state 15

    data_type	go to state 16
    variable_declaration	go to state 17
    statement_with_semicolon	go to state 18
    multiplicative_statement	go to state 19
    additive_statement	go to state 20
    assignment_statement	go to state 21



state 11

    function  ->  function_declaration compound_statement_with_brackets .   (rule 4)
    compound_statement_with_brackets  ->  compound_statement_with_brackets . '}'   (rule 14)
    compound_statement_with_brackets  ->  compound_statement_with_brackets . statement_with_semicolon   (rule 15)

    INT 	shift, and go to state 5
    FLOAT	shift, and go to state 6
    VOID	shift, and go to state 7
    VALUE	shift, and go to state 14
    RETURN	shift, and go to state 15
    '}' 	shift, and go to state 22

    $default	reduce using rule 4 (function)

    data_type	go to state 16
    variable_declaration	go to state 17
    statement_with_semicolon	go to state 23
    multiplicative_statement	go to state 19
    additive_statement	go to state 20
    assignment_statement	go to state 21



state 12

    arguement_list_with_brackets  ->  '(' . variable_declaration   (rule 11)
    arguement_list_with_brackets  ->  '(' . ')'   (rule 12)

    INT 	shift, and go to state 5
    FLOAT	shift, and go to state 6
    VOID	shift, and go to state 7
    ')' 	shift, and go to state 24

    data_type	go to state 16
    variable_declaration	go to state 25



state 13

    function_declaration  ->  FUNCTION data_type arguement_list_with_brackets . VALUE   (rule 5)
    arguement_list_with_brackets  ->  arguement_list_with_brackets . ')'   (rule 9)
    arguement_list_with_brackets  ->  arguement_list_with_brackets . ',' variable_declaration   (rule 10)

    VALUE	shift, and go to state 26
    ')' 	shift, and go to state 27
    ',' 	shift, and go to state 28



state 14

    multiplicative_statement  ->  VALUE .   (rule 22)
    assignment_statement  ->  VALUE . '=' additive_statement   (rule 27)

    '=' 	shift, and go to state 29

    $default	reduce using rule 22 (multiplicative_statement)



state 15

    statement_with_semicolon  ->  RETURN . ';'   (rule 19)

    ';' 	shift, and go to state 30



state 16

    variable_declaration  ->  data_type . VALUE   (rule 13)

    VALUE	shift, and go to state 31



state 17

    assignment_statement  ->  variable_declaration . '=' additive_statement   (rule 26)

    '=' 	shift, and go to state 32



state 18

    compound_statement_with_brackets  ->  '{' statement_with_semicolon .   (rule 16)

    $default	reduce using rule 16 (compound_statement_with_brackets)



state 19

    multiplicative_statement  ->  multiplicative_statement . '*' VALUE   (rule 20)
    multiplicative_statement  ->  multiplicative_statement . '/' VALUE   (rule 21)
    additive_statement  ->  multiplicative_statement .   (rule 25)

    '*' 	shift, and go to state 33
    '/' 	shift, and go to state 34

    $default	reduce using rule 25 (additive_statement)



state 20

    statement_with_semicolon  ->  additive_statement . ';'   (rule 18)
    additive_statement  ->  additive_statement . '+' multiplicative_statement   (rule 23)
    additive_statement  ->  additive_statement . '-' multiplicative_statement   (rule 24)

    '+' 	shift, and go to state 35
    '-' 	shift, and go to state 36
    ';' 	shift, and go to state 37



state 21

    statement_with_semicolon  ->  assignment_statement . ';'   (rule 17)

    ';' 	shift, and go to state 38



state 22

    compound_statement_with_brackets  ->  compound_statement_with_brackets '}' .   (rule 14)

    $default	reduce using rule 14 (compound_statement_with_brackets)



state 23

    compound_statement_with_brackets  ->  compound_statement_with_brackets statement_with_semicolon .   (rule 15)

    $default	reduce using rule 15 (compound_statement_with_brackets)



state 24

    arguement_list_with_brackets  ->  '(' ')' .   (rule 12)

    $default	reduce using rule 12 (arguement_list_with_brackets)



state 25

    arguement_list_with_brackets  ->  '(' variable_declaration .   (rule 11)

    $default	reduce using rule 11 (arguement_list_with_brackets)



state 26

    function_declaration  ->  FUNCTION data_type arguement_list_with_brackets VALUE .   (rule 5)

    $default	reduce using rule 5 (function_declaration)



state 27

    arguement_list_with_brackets  ->  arguement_list_with_brackets ')' .   (rule 9)

    $default	reduce using rule 9 (arguement_list_with_brackets)



state 28

    arguement_list_with_brackets  ->  arguement_list_with_brackets ',' . variable_declaration   (rule 10)

    INT 	shift, and go to state 5
    FLOAT	shift, and go to state 6
    VOID	shift, and go to state 7

    data_type	go to state 16
    variable_declaration	go to state 39



state 29

    assignment_statement  ->  VALUE '=' . additive_statement   (rule 27)

    VALUE	shift, and go to state 40

    multiplicative_statement	go to state 19
    additive_statement	go to state 41



state 30

    statement_with_semicolon  ->  RETURN ';' .   (rule 19)

    $default	reduce using rule 19 (statement_with_semicolon)



state 31

    variable_declaration  ->  data_type VALUE .   (rule 13)

    $default	reduce using rule 13 (variable_declaration)



state 32

    assignment_statement  ->  variable_declaration '=' . additive_statement   (rule 26)

    VALUE	shift, and go to state 40

    multiplicative_statement	go to state 19
    additive_statement	go to state 42



state 33

    multiplicative_statement  ->  multiplicative_statement '*' . VALUE   (rule 20)

    VALUE	shift, and go to state 43



state 34

    multiplicative_statement  ->  multiplicative_statement '/' . VALUE   (rule 21)

    VALUE	shift, and go to state 44



state 35

    additive_statement  ->  additive_statement '+' . multiplicative_statement   (rule 23)

    VALUE	shift, and go to state 40

    multiplicative_statement	go to state 45



state 36

    additive_statement  ->  additive_statement '-' . multiplicative_statement   (rule 24)

    VALUE	shift, and go to state 40

    multiplicative_statement	go to state 46



state 37

    statement_with_semicolon  ->  additive_statement ';' .   (rule 18)

    $default	reduce using rule 18 (statement_with_semicolon)



state 38

    statement_with_semicolon  ->  assignment_statement ';' .   (rule 17)

    $default	reduce using rule 17 (statement_with_semicolon)



state 39

    arguement_list_with_brackets  ->  arguement_list_with_brackets ',' variable_declaration .   (rule 10)

    $default	reduce using rule 10 (arguement_list_with_brackets)



state 40

    multiplicative_statement  ->  VALUE .   (rule 22)

    $default	reduce using rule 22 (multiplicative_statement)



state 41

    additive_statement  ->  additive_statement . '+' multiplicative_statement   (rule 23)
    additive_statement  ->  additive_statement . '-' multiplicative_statement   (rule 24)
    assignment_statement  ->  VALUE '=' additive_statement .   (rule 27)

    '+' 	shift, and go to state 35
    '-' 	shift, and go to state 36

    $default	reduce using rule 27 (assignment_statement)



state 42

    additive_statement  ->  additive_statement . '+' multiplicative_statement   (rule 23)
    additive_statement  ->  additive_statement . '-' multiplicative_statement   (rule 24)
    assignment_statement  ->  variable_declaration '=' additive_statement .   (rule 26)

    '+' 	shift, and go to state 35
    '-' 	shift, and go to state 36

    $default	reduce using rule 26 (assignment_statement)



state 43

    multiplicative_statement  ->  multiplicative_statement '*' VALUE .   (rule 20)

    $default	reduce using rule 20 (multiplicative_statement)



state 44

    multiplicative_statement  ->  multiplicative_statement '/' VALUE .   (rule 21)

    $default	reduce using rule 21 (multiplicative_statement)



state 45

    multiplicative_statement  ->  multiplicative_statement . '*' VALUE   (rule 20)
    multiplicative_statement  ->  multiplicative_statement . '/' VALUE   (rule 21)
    additive_statement  ->  additive_statement '+' multiplicative_statement .   (rule 23)

    '*' 	shift, and go to state 33
    '/' 	shift, and go to state 34

    $default	reduce using rule 23 (additive_statement)



state 46

    multiplicative_statement  ->  multiplicative_statement . '*' VALUE   (rule 20)
    multiplicative_statement  ->  multiplicative_statement . '/' VALUE   (rule 21)
    additive_statement  ->  additive_statement '-' multiplicative_statement .   (rule 24)

    '*' 	shift, and go to state 33
    '/' 	shift, and go to state 34

    $default	reduce using rule 24 (additive_statement)



state 47

    $   	go to state 48



state 48

    $   	go to state 49



state 49

    $default	accept
